#!/usr/bin/perl -s
use strict;
use warnings;

use Term::ANSIColor qw(:constants);
use Text::Fuzzy;

our ( $n, $h );    # command line switches (-s)
$|++;              # don't buffer output

# Help message...
if ($h) {
    print << "EOF";
$0 [-h] [-n=N] topic/<file>
    -h    this help
    -n=N  give me N terms (default: all)

Examples:
    ./practice topic/python topic/security
    ./practice -n=5 topic/*
EOF
    exit 0;
}

# Read in the terms and their definitions...
my $sep = '--->';
my %definition;
while (<>) {
    chomp;
    my ( $term, $def ) = split /\s*$sep\s*/;
    $definition{$term} = $def;
}

# Let's practice...
my %answers = ( wrong => 0, right => 0 );
for my $term ( keys %definition ) {

    # Give a term and get an answer...
    print BOLD, BLUE, $term, RESET, " $sep ";
    chomp( my $ans = <STDIN> );

    # Provide a hint on empty answer...
    unless ($ans) {
        show_hide( $definition{$term} );
        redo;
    }

    # Evaluate the answer...
    my $tf       = Text::Fuzzy->new($ans);
    my $distance = $tf->distance( $definition{$term} );
    if ( $distance <= 15 ) {
        $answers{right}++;
        print GREEN, "Right! (distance: $distance)\n", RESET;
    } else {
        $answers{wrong}++;
        print "Nope (distance: $distance). It's: '$definition{$term}'\n";
    }

    # Finish if we had enough terms...
    last if $n and $answers{wrong} + $answers{right} >= $n;
}

# Print out summary...
print "-" x 80, "\n";
print << "EOF";
[-] wrong: $answers{wrong}
[+] right: $answers{right}
EOF

sub show_hide {
    my $string = shift;
    my $len    = length $string;

    # Show the string...
    print "It's: '$string'";
    select( undef, undef, undef, ( 0.2 * $len ) );

    # Hide the string...
    print chr(8) for 1 .. ( $len + 8 );
    print " "    for 1 .. ( $len + 8 );
    print chr(8) for 1 .. ( $len + 8 );
}
